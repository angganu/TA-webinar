<%- include ../layout/header.ejs %>
    
    <style>
    audio,
    video {
        -moz-transition: all 1s ease;
        -ms-transition: all 1s ease;
        -o-transition: all 1s ease;
        -webkit-transition: all 1s ease;
        transition: all 1s ease;
        vertical-align: top;
    }
    </style>

    <script src="//cdn.webrtc-experiment.com/RTCMultiConnection.js"></script>
    <script src="//cdn.webrtc-experiment.com/firebase.js"></script>

    <div class="col-sm-9 left-panel">
        <div id="LoadContent" class="col-md-6">
            <div class="slide" id="slide" style="border: 1px solid black; width: 480px; height: 350px;repeat: no-repeat; margin-top:10px"></div>
        </div>
        <div class="col-md-6">
            <div id="videos"></div>
        </div>
        <div class="clear"><br></div>
        <div class="col-md-12">
            <div id="content" class="mess-content"></div>
            <input type="hidden" id="name" value="<%= sesi.username %>">
            <input type="button" id="send" class="btn btn-primary pull-right" value="Kirim">
            <input type="text" id="field" class="form-control chat-input">
        </div>
    </div>
    <div class="col-sm-3 right-panel">
        <%- include ../seminar/menuaudience.ejs %>
        
    </div>

    <script src="/../js/jquery-1.11.1.min.js"></script>
    <script src="/../socket.io/socket.io.js"></script>
    <script src="/../js/client_connect.js"></script>
    <script src="/../js/chat.js"></script>
    <script src="/../js/peer.js"></script>

    <script>
    var videos = document.querySelector('#videos');

    window.onload = function() {
        this.disabled = true;

        var role = 'Audience';

        window.connection = new RTCMultiConnection();

        // dont-override-session allows you force RTCMultiConnection
        // to not override default session of participants;
        // by default, session is always overridden and set to the session coming from initiator!
        connection.dontOverrideSession = true;

        connection.session = {
            audio: true,
            video: true,
            oneway: role == 'Audience'
        };

        connection.onstream = function(e) {
            videos.appendChild(e.mediaElement);

            if (e.type == 'remote') {
                // because "viewer" joined room as "oneway:true"
                // initiator will NEVER share participants
                // to manually ask for participants;
                // call "askToShareParticipants" method.
                connection.askToShareParticipants();
            }

            // if you're moderator
            // if stream-type is 'remote'
            // if target user is broadcaster!
            if (connection.isInitiator && e.type == 'remote' && !e.session.oneway) {
                // call "shareParticipants" to manually share participants with all connected users!
                connection.shareParticipants({
                    dontShareWith: e.userid
                });
            }
        };

        connection.onNewSession = function(session) {
            if (role == 'Audience') {
                session.join({
                    oneway: true
                });
            } else {
                session.join();
            }
        };

        if (role == 'Presenter')
            connection.open({
                sessionid: connection.channel,
                captureUserMediaOnDemand: false
            });
        else
            connection.connect(connection.channel);
    };
    </script>

<%- include ../layout/footer.ejs %>