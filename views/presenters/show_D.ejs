<!--
> Muaz Khan     - github.com/muaz-khan 
> MIT License   - www.webrtc-experiment.com/licence
> Documentation - www.RTCMultiConnection.org
-->
<!DOCTYPE html>
<html lang="en">

<head>
    <title>Multi-Broadcasters and Many Viewers using RTCMultiConnection Â® Muaz Khan</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <link rel="author" type="text/html" href="https://plus.google.com/+MuazKhan">
    <meta name="author" content="Muaz Khan">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <link rel="stylesheet" href="//cdn.webrtc-experiment.com/style.css">
    <style>
    audio,
    video {
        -moz-transition: all 1s ease;
        -ms-transition: all 1s ease;
        -o-transition: all 1s ease;
        -webkit-transition: all 1s ease;
        transition: all 1s ease;
        vertical-align: top;
    }
    </style>

    <!-- scripts used for WebRTC connections -->
    <script src="//cdn.webrtc-experiment.com/RTCMultiConnection.js"></script>
    <script src="//cdn.webrtc-experiment.com/firebase.js"></script>
</head>

<body>

        <section class="experiment">
            <h2>Your Role?</h2>
            <br />
            <br />
            <select>
                <option>Broadcaster</option>
                <option>Anonymous Viewer</option>
                <option>Room Moderator</option>
            </select>
            <button>Continue</button>
            <br />

            <div id="videos"></div>
        </section>

        <script>
        var select = document.querySelector('select');
        var button = document.querySelector('button');
        var videos = document.querySelector('#videos');

        button.onclick = function() {
            this.disabled = true;

            var role = select.value;

            window.connection = new RTCMultiConnection();

            // dont-override-session allows you force RTCMultiConnection
            // to not override default session of participants;
            // by default, session is always overridden and set to the session coming from initiator!
            connection.dontOverrideSession = true;

            connection.session = {
                audio: true,
                video: true,
                oneway: role == 'Anonymous Viewer'
            };

            connection.onstream = function(e) {
                videos.appendChild(e.mediaElement);

                if (e.type == 'remote') {
                    // because "viewer" joined room as "oneway:true"
                    // initiator will NEVER share participants
                    // to manually ask for participants;
                    // call "askToShareParticipants" method.
                    connection.askToShareParticipants();
                }

                // if you're moderator
                // if stream-type is 'remote'
                // if target user is broadcaster!
                if (connection.isInitiator && e.type == 'remote' && !e.session.oneway) {
                    // call "shareParticipants" to manually share participants with all connected users!
                    connection.shareParticipants({
                        dontShareWith: e.userid
                    });
                }
            };

            connection.onNewSession = function(session) {
                if (role == 'Anonymous Viewer') {
                    session.join({
                        oneway: true
                    });
                }

                if (role == 'Broadcaster') {
                    session.join();
                }
            };

            if (role == 'Room Moderator')
                connection.open({
                    sessionid: connection.channel,
                    captureUserMediaOnDemand: false
                });
            else
                connection.connect(connection.channel);
        };
        </script>

</body>

</html>